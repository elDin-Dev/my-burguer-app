{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","height","margin","Burger","ingredients","Button","buttonType","clicked","onCheckoutCancelled","onCheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","stree","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.6201e078.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__BnrOU\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\nexport const checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{ width: '100%', height: '300px', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n\r\n            <Button\r\n             buttonType=\"Danger\"\r\n             clicked={props.onCheckoutCancelled}>CANCEL</Button>\r\n            <Button\r\n             buttonType=\"Success\" \r\n             clicked={props.onCheckoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css'\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErroHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {updateObject, checkValidity} from '../../../shared/utility';\r\n\r\n\r\nexport class ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched:false,\r\n            },\r\n\r\n            stree: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched:false,\r\n\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                },\r\n                valid: false,\r\n                touched:false,\r\n\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched:false,\r\n\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'your e-email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched:false,\r\n\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ],\r\n\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true,\r\n            },\r\n        },\r\n        formIsValid: false,\r\n      \r\n\r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId,\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched:true,            \r\n        })\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]:updatedFormElement\r\n        });     \r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid=true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid= updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key],\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n\r\n                {\r\n                    formElementsArray.map(formElement => (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)\r\n\r\n                            }\r\n                        />\r\n                    ))\r\n                }\r\n                <Button buttonType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData,axios))\r\n","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nexport class Checkout extends Component {\r\n\r\n\r\n    checkoutCancelledHandler = () => {\r\n\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n\r\n        this.props.history.replace('/checkout/contact-data');\r\n\r\n    }\r\n\r\n\r\n    onCheckoutCancelled\r\n    render() {\r\n\r\n   \r\n\r\n        let summary = <Redirect to=\"/\" />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null ;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        onCheckoutContinued={this.checkoutContinuedHandler}\r\n                        onCheckoutCancelled={this.checkoutCancelledHandler}\r\n                        ingredients={this.props.ings} />\r\n\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        purchased: state.order.purchased,\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout)\r\n","import React from 'react';\r\nimport classes from './Input.module.css'\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={classes.InputElement}\r\n                    value={props.value}\r\n                    onChange={props.changed} >\r\n                    {\r\n                        props.elementConfig.options.map(option => (\r\n                            <option\r\n                                key={option.value}\r\n                                value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        ))\r\n                    }\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__nKw_p\",\"Label\":\"Input_Label__HbnVy\",\"InputElement\":\"Input_InputElement__365wv\",\"Invalid\":\"Input_Invalid__xfX-3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3x3S-\"};"],"sourceRoot":""}